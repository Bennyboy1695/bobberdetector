name: Build, Version, and Publish Mod

on:
  push:
    tags:
      - 'v*.*.*'
      - 'test-*'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Make Gradle executable
        run: chmod +x gradlew

      - name: Get version from tag
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Check if test build
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/test-* ]]; then
            echo "IS_TEST=true" >> $GITHUB_ENV
          else
            echo "IS_TEST=false" >> $GITHUB_ENV
          fi

      - name: Read Minecraft version from gradle.properties
        run: |
          MC_VERSION=$(grep "^minecraft_version=" gradle.properties | cut -d'=' -f2)
          echo "MC_VERSION=$MC_VERSION" >> $GITHUB_ENV
      
      - name: Export ENABLED_LOADERS to environment
        run: echo "ENABLED_LOADERS=${{ secrets.ENABLED_LOADERS }}" >> $GITHUB_ENV

      - name: Determine Forge/NeoForge build
        id: detect-loader
        uses: actions/github-script@v6
        with:
          script: |
            const semver = require('semver');

            const mcVersion = process.env.MC_VERSION || '1.20.1';
            const loaders = process.env.ENABLED_LOADERS || '';
            const forgeEnabled = loaders.includes('forge');

            const isNeoForge = semver.gte(mcVersion, '1.21.0') && forgeEnabled;
            const isForge = semver.lt(mcVersion, '1.21.0') && forgeEnabled;

            core.setOutput('PUBLISH_NEOFORGE', isNeoForge);
            core.setOutput('PUBLISH_FORGE', isForge);
        env:
          MC_VERSION: ${{ env.MC_VERSION }}
          ENABLED_LOADERS: ${{ secrets.ENABLED_LOADERS }}

      - name: Export loader build flags
        run: |
          echo "PUBLISH_NEOFORGE=${{ steps.detect-loader.outputs.PUBLISH_NEOFORGE }}" >> $GITHUB_ENV
          echo "PUBLISH_FORGE=${{ steps.detect-loader.outputs.PUBLISH_FORGE }}" >> $GITHUB_ENV

      - name: Build Forge
        if: ${{ env.PUBLISH_FORGE == 'true' }}
        run: ./gradlew :forge:build -Pversion_property=${{ env.VERSION }}

      - name: Build NeoForge
        if: ${{ env.PUBLISH_NEOFORGE == 'true' }}
        run: ./gradlew :neoforge:build -Pversion_property=${{ env.VERSION }}

      - name: Build Fabric
        if: ${{ env.ENABLED_LOADERS && contains(env.ENABLED_LOADERS, 'fabric') }}
        run: ./gradlew :fabric:build -Pversion_property=${{ env.VERSION }}

      - name: Generate changelog
        run: |
          echo "CHANGELOG<<EOF" >> $GITHUB_ENV
          git log --pretty=format:"- %s" $(git describe --tags --abbrev=0)..HEAD >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Upload Forge JARs (Test)
        if: ${{ env.IS_TEST == 'true' && env.PUBLISH_FORGE == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: forge-${{ env.VERSION }}
          path: forge/build/libs/*.jar

      - name: Upload NeoForge JARs (Test)
        if: ${{ env.IS_TEST == 'true' && env.PUBLISH_NEOFORGE == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: neoforge-${{ env.VERSION }}
          path: neoforge/build/libs/*.jar

      - name: Upload Fabric JARs (Test)
        if: ${{ env.IS_TEST == 'true' && env.ENABLED_LOADERS && contains(env.ENABLED_LOADERS, 'fabric') }}
        uses: actions/upload-artifact@v4
        with:
          name: fabric-${{ env.VERSION }}
          path: fabric/build/libs/*.jar

      - name: Publish Forge
        if: ${{ env.IS_TEST != 'true' && env.PUBLISH_FORGE == 'true' }}
        uses: Kira-NT/mc-publish@v3.3
        with:
          modrinth-id: ${{ secrets.MODRINTH_ID }}
          modrinth-featured: true
          curseforge-id: ${{ secrets.CURSEFORGE_ID }}
          loaders: |
            forge
          game-versions: |
            ${{ env.MC_VERSION }}
          version: ${{ env.VERSION }}
          changelog: ${{ env.CHANGELOG }}
          files: forge/build/libs/*[!-dev][!-sources].jar:forge
        env:
          MODRINTH_TOKEN: ${{ secrets.MODRINTH_TOKEN }}
          CURSEFORGE_TOKEN: ${{ secrets.CURSEFORGE_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish NeoForge
        if: ${{ env.IS_TEST != 'true' && env.PUBLISH_NEOFORGE == 'true' }}
        uses: Kira-NT/mc-publish@v3.3
        with:
          modrinth-id: ${{ secrets.MODRINTH_ID }}
          modrinth-featured: true
          curseforge-id: ${{ secrets.CURSEFORGE_ID }}
          loaders: |
            neoforge
          game-versions: |
            ${{ env.MC_VERSION }}
          version: ${{ env.VERSION }}
          changelog: ${{ env.CHANGELOG }}
          files: neoforge/build/libs/*[!-dev][!-sources].jar:neoforge
        env:
          MODRINTH_TOKEN: ${{ secrets.MODRINTH_TOKEN }}
          CURSEFORGE_TOKEN: ${{ secrets.CURSEFORGE_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish Fabric
        if: ${{ env.IS_TEST != 'true' && env.ENABLED_LOADERS && contains(env.ENABLED_LOADERS, 'fabric') }}
        uses: Kira-NT/mc-publish@v3.3
        with:
          modrinth-id: ${{ secrets.MODRINTH_ID }}
          modrinth-featured: true
          curseforge-id: ${{ secrets.CURSEFORGE_ID }}
          loaders: |
            fabric
          game-versions: |
            ${{ env.MC_VERSION }}
          version: ${{ env.VERSION }}
          changelog: ${{ env.CHANGELOG }}
          files: fabric/build/libs/*[!-dev][!-sources].jar:fabric
        env:
          MODRINTH_TOKEN: ${{ secrets.MODRINTH_TOKEN }}
          CURSEFORGE_TOKEN: ${{ secrets.CURSEFORGE_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
